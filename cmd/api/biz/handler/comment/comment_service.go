// Code generated by hertz generator.

package comment

import (
	"context"

	comment "github.com/HUST-MiniTiktok/mini_tiktok/cmd/api/biz/model/comment"
	"github.com/HUST-MiniTiktok/mini_tiktok/cmd/api/biz/rpc"
	"github.com/HUST-MiniTiktok/mini_tiktok/util"
	"github.com/HUST-MiniTiktok/mini_tiktok/util/conv"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/remote/trans/nphttp2/codes"
)

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, util.NewRespMap(int32(codes.InvalidArgument), err.Error()))
		return
	}

	kitex_resp, err := rpc.CommentRPC.CommentAction(ctx, conv.ToKitexCommentActionRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzCommentActionResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, util.NewRespMap(int32(codes.Internal), err.Error()))
	}
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, util.NewRespMap(int32(codes.InvalidArgument), err.Error()))
		return
	}

	kitex_resp, err := rpc.CommentRPC.CommentList(ctx, conv.ToKitexCommentListRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzCommentListResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, util.NewRespMap(int32(codes.Internal), err.Error()))
	}
}
