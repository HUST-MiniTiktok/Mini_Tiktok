// Code generated by hertz generator.

package relation

import (
	"context"

	"github.com/HUST-MiniTiktok/mini_tiktok/cmd/api/biz/client"
	relation "github.com/HUST-MiniTiktok/mini_tiktok/cmd/api/biz/model/relation"
	"github.com/HUST-MiniTiktok/mini_tiktok/pkg/errno"
	"github.com/HUST-MiniTiktok/mini_tiktok/pkg/utils/conv"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, conv.ToHertzBaseResponse(errno.ParamErr))
		return
	}

	kitex_resp, err := client.RelationRPC.RelationAction(ctx, conv.ToKitexRelationActionRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzRelationActionResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, conv.ToHertzBaseResponse(err))
	}
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, conv.ToHertzBaseResponse(errno.ParamErr))
		return
	}

	kitex_resp, err := client.RelationRPC.RelationFollowList(ctx, conv.ToKitexRelationFollowListRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzRelationFollowListResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, conv.ToHertzBaseResponse(err))
	}
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, conv.ToHertzBaseResponse(errno.ParamErr))
		return
	}

	kitex_resp, err := client.RelationRPC.RelationFollowerList(ctx, conv.ToKitexRelationFollowerListRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzRelationFollowerListResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, conv.ToHertzBaseResponse(err))
	}
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, conv.ToHertzBaseResponse(errno.ParamErr))
		return
	}

	kitex_resp, err := client.RelationRPC.RelationFriendList(ctx, conv.ToKitexRelationFriendListRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzRelationFriendListResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, conv.ToHertzBaseResponse(err))
	}
}
