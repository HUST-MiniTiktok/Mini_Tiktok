// Code generated by hertz generator.

package message

import (
	"context"

	message "github.com/HUST-MiniTiktok/mini_tiktok/cmd/api/biz/model/message"
	"github.com/HUST-MiniTiktok/mini_tiktok/cmd/api/biz/rpc"
	"github.com/HUST-MiniTiktok/mini_tiktok/utils"
	"github.com/HUST-MiniTiktok/mini_tiktok/utils/conv"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/remote/trans/nphttp2/codes"
)

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.MessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, util.NewRespMap(int32(codes.InvalidArgument), err.Error()))
		return
	}

	kitex_resp, err := rpc.MessageRPC.MessageChat(ctx, conv.ToKitexMessageChatRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzMessageChatResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, util.NewRespMap(int32(codes.Internal), err.Error()))
	}
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.MessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, util.NewRespMap(int32(codes.InvalidArgument), err.Error()))
		return
	}

	kitex_resp, err := rpc.MessageRPC.MessageAction(ctx, conv.ToKitexMessageActionRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzMessageActionResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, util.NewRespMap(int32(codes.Internal), err.Error()))
	}
}
