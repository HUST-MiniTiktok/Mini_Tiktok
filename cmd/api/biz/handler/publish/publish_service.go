// Code generated by hertz generator.

package publish

import (
	"context"

	publish "github.com/HUST-MiniTiktok/mini_tiktok/cmd/api/biz/model/publish"
	"github.com/HUST-MiniTiktok/mini_tiktok/cmd/api/biz/rpc"
	"github.com/HUST-MiniTiktok/mini_tiktok/util"
	"github.com/HUST-MiniTiktok/mini_tiktok/util/conv"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/remote/trans/nphttp2/codes"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.PublishActionRequest
	req.Token = c.PostForm("token")
	req.Title = c.PostForm("title")
	if err != nil {
		c.JSON(consts.StatusBadRequest, utils.NewRespMap(int32(codes.Unauthenticated), err.Error()))
		return
	}

	f, err := c.FormFile("data")
	if err != nil {
		c.JSON(consts.StatusBadRequest, utils.NewRespMap(int32(codes.InvalidArgument), err.Error()))
		return
	}
	req.Data, err = utils.ReadFile(f)
	if err != nil {
		c.JSON(consts.StatusBadRequest, utils.NewRespMap(int32(codes.InvalidArgument), err.Error()))
		return
	}

	kitex_resp, err := rpc.PublishRPC.PublishAction(ctx, conv.ToKitexPublishActionRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzPublishActionResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, utils.NewRespMap(int32(codes.Internal), err.Error()))
	}
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, utils.NewRespMap(int32(codes.InvalidArgument), err.Error()))
		return
	}

	kitex_resp, err := rpc.PublishRPC.PublishList(ctx, conv.ToKitexPublishListRequest(&req))

	if err == nil {
		c.JSON(consts.StatusOK, conv.ToHertzPublishListResponse(kitex_resp))
	} else {
		c.JSON(consts.StatusOK, utils.NewRespMap(int32(codes.Internal), err.Error()))
	}
}
