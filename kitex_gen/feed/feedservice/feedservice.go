// Code generated by Kitex v0.7.0. DO NOT EDIT.

package feedservice

import (
	"context"
	feed "github.com/HUST-MiniTiktok/mini_tiktok/kitex_gen/feed"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return feedServiceServiceInfo
}

var feedServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FeedService"
	handlerType := (*feed.FeedService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFeed": kitex.NewMethodInfo(getFeedHandler, newFeedServiceGetFeedArgs, newFeedServiceGetFeedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "feed",
		"ServiceFilePath": "../../idl/feed.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServiceGetFeedArgs)
	realResult := result.(*feed.FeedServiceGetFeedResult)
	success, err := handler.(feed.FeedService).GetFeed(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServiceGetFeedArgs() interface{} {
	return feed.NewFeedServiceGetFeedArgs()
}

func newFeedServiceGetFeedResult() interface{} {
	return feed.NewFeedServiceGetFeedResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeed(ctx context.Context, request *feed.FeedRequest) (r *feed.FeedResponse, err error) {
	var _args feed.FeedServiceGetFeedArgs
	_args.Request = request
	var _result feed.FeedServiceGetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
