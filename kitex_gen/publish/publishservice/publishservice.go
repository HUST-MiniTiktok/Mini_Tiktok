// Code generated by Kitex v0.7.0. DO NOT EDIT.

package publishservice

import (
	"context"
	publish "github.com/HUST-MiniTiktok/mini_tiktok/kitex_gen/publish"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishServiceServiceInfo
}

var publishServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublishService"
	handlerType := (*publish.PublishService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishAction":    kitex.NewMethodInfo(publishActionHandler, newPublishServicePublishActionArgs, newPublishServicePublishActionResult, false),
		"PublishList":      kitex.NewMethodInfo(publishListHandler, newPublishServicePublishListArgs, newPublishServicePublishListResult, false),
		"GetVideoById":     kitex.NewMethodInfo(getVideoByIdHandler, newPublishServiceGetVideoByIdArgs, newPublishServiceGetVideoByIdResult, false),
		"GetVideoByIdList": kitex.NewMethodInfo(getVideoByIdListHandler, newPublishServiceGetVideoByIdListArgs, newPublishServiceGetVideoByIdListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "publish",
		"ServiceFilePath": "../../idl/publish.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishActionArgs)
	realResult := result.(*publish.PublishServicePublishActionResult)
	success, err := handler.(publish.PublishService).PublishAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishActionArgs() interface{} {
	return publish.NewPublishServicePublishActionArgs()
}

func newPublishServicePublishActionResult() interface{} {
	return publish.NewPublishServicePublishActionResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishListArgs)
	realResult := result.(*publish.PublishServicePublishListResult)
	success, err := handler.(publish.PublishService).PublishList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishListArgs() interface{} {
	return publish.NewPublishServicePublishListArgs()
}

func newPublishServicePublishListResult() interface{} {
	return publish.NewPublishServicePublishListResult()
}

func getVideoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceGetVideoByIdArgs)
	realResult := result.(*publish.PublishServiceGetVideoByIdResult)
	success, err := handler.(publish.PublishService).GetVideoById(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceGetVideoByIdArgs() interface{} {
	return publish.NewPublishServiceGetVideoByIdArgs()
}

func newPublishServiceGetVideoByIdResult() interface{} {
	return publish.NewPublishServiceGetVideoByIdResult()
}

func getVideoByIdListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceGetVideoByIdListArgs)
	realResult := result.(*publish.PublishServiceGetVideoByIdListResult)
	success, err := handler.(publish.PublishService).GetVideoByIdList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceGetVideoByIdListArgs() interface{} {
	return publish.NewPublishServiceGetVideoByIdListArgs()
}

func newPublishServiceGetVideoByIdListResult() interface{} {
	return publish.NewPublishServiceGetVideoByIdListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishAction(ctx context.Context, request *publish.PublishActionRequest) (r *publish.PublishActionResponse, err error) {
	var _args publish.PublishServicePublishActionArgs
	_args.Request = request
	var _result publish.PublishServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, request *publish.PublishListRequest) (r *publish.PublishListResponse, err error) {
	var _args publish.PublishServicePublishListArgs
	_args.Request = request
	var _result publish.PublishServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoById(ctx context.Context, request *publish.GetVideoByIdRequest) (r *publish.GetVideoByIdResponse, err error) {
	var _args publish.PublishServiceGetVideoByIdArgs
	_args.Request = request
	var _result publish.PublishServiceGetVideoByIdResult
	if err = p.c.Call(ctx, "GetVideoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoByIdList(ctx context.Context, request *publish.GetVideoByIdListRequest) (r *publish.GetVideoByIdListResponse, err error) {
	var _args publish.PublishServiceGetVideoByIdListArgs
	_args.Request = request
	var _result publish.PublishServiceGetVideoByIdListResult
	if err = p.c.Call(ctx, "GetVideoByIdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
