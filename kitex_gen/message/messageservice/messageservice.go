// Code generated by Kitex v0.7.0. DO NOT EDIT.

package messageservice

import (
	"context"
	message "github.com/HUST-MiniTiktok/mini_tiktok/kitex_gen/message"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageChat":        kitex.NewMethodInfo(messageChatHandler, newMessageServiceMessageChatArgs, newMessageServiceMessageChatResult, false),
		"MessageAction":      kitex.NewMethodInfo(messageActionHandler, newMessageServiceMessageActionArgs, newMessageServiceMessageActionResult, false),
		"GetFriendLatestMsg": kitex.NewMethodInfo(getFriendLatestMsgHandler, newMessageServiceGetFriendLatestMsgArgs, newMessageServiceGetFriendLatestMsgResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "message",
		"ServiceFilePath": "../../idl/message.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceMessageChatArgs)
	realResult := result.(*message.MessageServiceMessageChatResult)
	success, err := handler.(message.MessageService).MessageChat(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageChatArgs() interface{} {
	return message.NewMessageServiceMessageChatArgs()
}

func newMessageServiceMessageChatResult() interface{} {
	return message.NewMessageServiceMessageChatResult()
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceMessageActionArgs)
	realResult := result.(*message.MessageServiceMessageActionResult)
	success, err := handler.(message.MessageService).MessageAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageActionArgs() interface{} {
	return message.NewMessageServiceMessageActionArgs()
}

func newMessageServiceMessageActionResult() interface{} {
	return message.NewMessageServiceMessageActionResult()
}

func getFriendLatestMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceGetFriendLatestMsgArgs)
	realResult := result.(*message.MessageServiceGetFriendLatestMsgResult)
	success, err := handler.(message.MessageService).GetFriendLatestMsg(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetFriendLatestMsgArgs() interface{} {
	return message.NewMessageServiceGetFriendLatestMsgArgs()
}

func newMessageServiceGetFriendLatestMsgResult() interface{} {
	return message.NewMessageServiceGetFriendLatestMsgResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageChat(ctx context.Context, request *message.MessageChatRequest) (r *message.MessageChatResponse, err error) {
	var _args message.MessageServiceMessageChatArgs
	_args.Request = request
	var _result message.MessageServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageAction(ctx context.Context, request *message.MessageActionRequest) (r *message.MessageActionResponse, err error) {
	var _args message.MessageServiceMessageActionArgs
	_args.Request = request
	var _result message.MessageServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendLatestMsg(ctx context.Context, request *message.GetFriendLatestMsgRequest) (r *message.GetFriendLatestMsgResponse, err error) {
	var _args message.MessageServiceGetFriendLatestMsgArgs
	_args.Request = request
	var _result message.MessageServiceGetFriendLatestMsgResult
	if err = p.c.Call(ctx, "GetFriendLatestMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
